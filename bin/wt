#!/bin/sh

set -e

print_usage () {
	echo 'Usage:\n'
	echo 'wt <clone> <remote-url> [destination]'
	echo 'wt <add|a> [worktree_dir]'
	echo 'wt <remove|rm>'
	echo 'wt <help|-h|--help>'
}

if [ $# -eq 0 ]; then
	print_usage
	exit 1
fi

_fzf () {
	fzf --preview='echo; git log --oneline {}'
}

_user_pick_branch () {
	git  branch --list -a | \
	sed 's.remotes/origin/..' | \
	awk '{ print $NF }' | \
	_fzf
}

new () {
	worktree=$(_user_pick_branch)

	if [ -z "$worktree_dir" ]; then
		worktree_dir="$worktree_name"
	fi

	git worktree add $worktree_dir -b $worktree_name $worktree
}

add () {
	worktree=$(_user_pick_branch)

	if [ -z "$worktree_dir" ]; then
		worktree_dir="$worktree"
	fi

	git worktree add $worktree_dir $worktree
}

remove () {
	worktree=$(
		git  worktree list --porcelain | \
		grep worktree | \
		awk 'BEGIN { FS="/" } $1 ~ /worktree/ {print $NF}' | \
		_fzf
	)
	git worktree remove $worktree
	echo "Removed worktree:" $worktree
}

clone () {
	clone_dir=$(
		echo $(basename $remote_url) | \
		awk -F '.' '{ print $1 }'
	)

	if [ -n "$destination" ]; then
		clone_dir=$destination
	fi

	git clone --bare $remote_url $clone_dir/.git
	main_branch=$(
		git -C $clone_dir branch --list | \
		grep '*' | \
		awk '{print $NF}'
	)
	git -C $clone_dir worktree add $main_branch
}

cmd=$1
case $cmd in
	"new" | "n")
		if [ $# -lt 2 ]; then
			echo "-b: worktree_name required."
			print_usage
			exit 1
		fi
		worktree_name=$2
		worktree_dir=$3
		new
		;;
	"add" | "a")
		worktree_dir=$2
		add
		;;
	"remove" | "rm")
		remove
		;;
	"clone")
		if [ $# -lt 2 ]; then
			echo "Remote URL required."
			print_usage
			exit 1
		fi

		remote_url=$1
		destination=$2
		clone
		;;
	"-h" | "--help" | "help")
		print_usage
		exit 0
		;;
	*)
		echo "wt: invalid command: $cmd"
		print_usage
		exit 1
		;;
esac

