#!/bin/sh

set -e

print_usage () {
	echo 'Usage:\n'
	echo 'wt clone <remote-url> [clone_dir]'
	echo 'wt new <worktree_name> [worktree_dir]'
	echo 'wt add [worktree_dir]'
	echo 'wt remove [-f|--force]'
	echo 'wt help|-h|--help'
}

if [ $# -eq 0 ]; then
	print_usage
	exit 1
fi

user_selects_branch () {
	list_all_branches |
	fzf --preview='echo; git log --oneline {}'
}

list_all_branches () {
	git branch --list -a | \
	sed 's.remotes/origin/..' | \
	awk '{ print $NF }' |
	sort -u
}

user_selects_worktree () {
	git worktree list | \
	grep -v '(bare)'  | \
	awk '{print $1}'  | \
	sed "s|$(pwd)/||" | \
	fzf --preview='echo; git -C {} log --oneline'
}

get_main_branch() {
	git_dir="$1"
	if [ -z $git_dir ]; then
		git_dir="./"
	fi

	git -C $git_dir branch --list | \
	grep '*' | \
	awk '{print $NF}'
}

new () {
	branch=$(user_selects_branch)

	if [ -z "$worktree_dir" ]; then
		worktree_dir="$worktree_name"
	fi

	git worktree add --no-track $worktree_dir -b $worktree_name origin/$branch

	icp $(get_main_branch) $worktree_dir
}

add () {
	branch=$(user_selects_branch)

	if [ -z "$worktree_dir" ]; then
		worktree_dir="$branch"
	fi

	git worktree add $worktree_dir $branch
	git -C $worktree_dir branch -u origin/$branch

	icp $(get_main_branch) $worktree_dir
}

remove () {
	worktree=$(user_selects_worktree)
	branch=$(git -C $worktree branch --show-current)

	git worktree remove $worktree $force
	echo "Removed worktree:" $worktree

	git branch $delete_branch $branch
}

clone () {
	clone_dir=$(
		echo $(basename $remote_url) | \
		awk -F '.' '{ print $1 }'
	)

	if [ -n "$destination" ]; then
		clone_dir=$destination
	fi

	git clone --bare $remote_url $clone_dir/.git

	# Workaround to Git worktree using bare repository and cannot fetch remote branches
	# See https://morgan.cugerone.com/blog/workarounds-to-git-worktree-using-bare-repository-and-cannot-fetch-remote-branches/
	git -C $clone_dir config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
	git -C $clone_dir fetch origin

	main_branch=$(get_main_branch $clone_dir)

	git -C $clone_dir worktree add $main_branch
	git -C $clone_dir/$main_branch branch -u origin/$main_branch
}

cmd=$1
case $cmd in
	"new" | "n")
		if [ $# -lt 2 ]; then
			echo "worktree_name required."
			print_usage
			exit 1
		fi
		worktree_name=$2
		worktree_dir=$3
		new
		;;
	"add" | "a")
		worktree_dir=$2
		add
		;;
	"remove" | "rm")
		case $2 in
			"-f" | "--force")
				force="-f"
				delete_branch="-D"
			;;
		*)
			force=""
			delete_branch="-d"
			;;
		esac
		remove
		;;
	"clone" | "c")
		if [ $# -lt 2 ]; then
			echo "Remote URL required."
			print_usage
			exit 1
		fi

		remote_url=$2
		destination=$3
		clone
		;;
	"-h" | "--help" | "help")
		print_usage
		exit 0
		;;
	*)
		echo "wt: invalid command: $cmd"
		print_usage
		exit 1
		;;
esac

